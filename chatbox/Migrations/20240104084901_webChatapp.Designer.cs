// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using chatbox.Models;

#nullable disable

namespace chatbox.Migrations
{
    [DbContext(typeof(chatboxContext))]
    [Migration("20240104084901_webChatapp")]
    partial class webChatapp
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("chatbox.Models.Chatdata", b =>
                {
                    b.Property<int>("ChatIdPk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("chat_id_pk");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatIdPk"), 1L, 1);

                    b.Property<DateTime>("LastMessageTime")
                        .HasColumnType("datetime")
                        .HasColumnName("last_message_time");

                    b.Property<int>("ReceiverIdFk")
                        .HasColumnType("int")
                        .HasColumnName("receiver_id_fk");

                    b.Property<int>("SenderIdFk")
                        .HasColumnType("int")
                        .HasColumnName("sender_id_fk");

                    b.HasKey("ChatIdPk");

                    b.HasIndex(new[] { "ReceiverIdFk" }, "IX_chatdata_receiver_id_fk");

                    b.HasIndex(new[] { "SenderIdFk" }, "IX_chatdata_sender_id_fk");

                    b.ToTable("chatdata", (string)null);
                });

            modelBuilder.Entity("chatbox.Models.Messagedata", b =>
                {
                    b.Property<int>("MessageIdPk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("message_id_pk");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageIdPk"), 1L, 1);

                    b.Property<int>("ChatIdFk")
                        .HasColumnType("int")
                        .HasColumnName("chat_id_fk");

                    b.Property<string>("Message")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("message");

                    b.Property<bool?>("MessageSeen")
                        .HasColumnType("bit")
                        .HasColumnName("message_seen");

                    b.Property<DateTime>("MessageTime")
                        .HasColumnType("datetime")
                        .HasColumnName("message_time");

                    b.Property<int?>("ReceiverIdFk")
                        .HasColumnType("int")
                        .HasColumnName("receiver_id_fk");

                    b.Property<int>("SenderIdFk")
                        .HasColumnType("int")
                        .HasColumnName("sender_id_fk");

                    b.HasKey("MessageIdPk");

                    b.HasIndex(new[] { "ChatIdFk" }, "IX_messagedata_chat_id_fk");

                    b.HasIndex(new[] { "SenderIdFk" }, "IX_messagedata_sender_id_fk");

                    b.ToTable("messagedata", (string)null);
                });

            modelBuilder.Entity("chatbox.Models.Userdata", b =>
                {
                    b.Property<int>("UserIdPk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id_pk");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserIdPk"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("LoginIdUk")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("login_id_uk");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNoUk")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("phone_no_uk");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("user_name");

                    b.HasKey("UserIdPk");

                    b.HasIndex(new[] { "LoginIdUk" }, "Unique_Login_id")
                        .IsUnique();

                    b.HasIndex(new[] { "PhoneNoUk" }, "Unique_Phone_no")
                        .IsUnique();

                    b.ToTable("userdata", (string)null);
                });

            modelBuilder.Entity("chatbox.Models.Chatdata", b =>
                {
                    b.HasOne("chatbox.Models.Userdata", "ReceiverIdFkNavigation")
                        .WithMany("ChatdatumReceiverIdFkNavigations")
                        .HasForeignKey("ReceiverIdFk")
                        .IsRequired()
                        .HasConstraintName("FK_userdataUserId_chatdataReceiverId");

                    b.HasOne("chatbox.Models.Userdata", "SenderIdFkNavigation")
                        .WithMany("ChatdatumSenderIdFkNavigations")
                        .HasForeignKey("SenderIdFk")
                        .IsRequired()
                        .HasConstraintName("FK_userdataUserId_chatdataSenderId");

                    b.Navigation("ReceiverIdFkNavigation");

                    b.Navigation("SenderIdFkNavigation");
                });

            modelBuilder.Entity("chatbox.Models.Messagedata", b =>
                {
                    b.HasOne("chatbox.Models.Chatdata", "ChatIdFkNavigation")
                        .WithMany("Messagedata")
                        .HasForeignKey("ChatIdFk")
                        .IsRequired()
                        .HasConstraintName("FK_chatdataChatId_messagedataChatId");

                    b.HasOne("chatbox.Models.Userdata", "SenderIdFkNavigation")
                        .WithMany("Messagedata")
                        .HasForeignKey("SenderIdFk")
                        .IsRequired()
                        .HasConstraintName("FK_userdataUserId_messagedataSenderId");

                    b.Navigation("ChatIdFkNavigation");

                    b.Navigation("SenderIdFkNavigation");
                });

            modelBuilder.Entity("chatbox.Models.Chatdata", b =>
                {
                    b.Navigation("Messagedata");
                });

            modelBuilder.Entity("chatbox.Models.Userdata", b =>
                {
                    b.Navigation("ChatdatumReceiverIdFkNavigations");

                    b.Navigation("ChatdatumSenderIdFkNavigations");

                    b.Navigation("Messagedata");
                });
#pragma warning restore 612, 618
        }
    }
}

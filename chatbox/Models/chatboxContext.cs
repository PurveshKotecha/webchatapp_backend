// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using ChatWebApp.Models;
using Microsoft.EntityFrameworkCore;

namespace chatbox.Models;

public partial class chatboxContext : DbContext
{
    public chatboxContext()
    {
    }

    public chatboxContext(DbContextOptions<chatboxContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Chatdata> chatdata { get; set; }

    public virtual DbSet<Messagedata> messagedata { get; set; }

    public virtual DbSet<Userdata> userdata { get; set; }

    public virtual DbSet<GetIndexDataEntity> IndexDetails { get; set; } = null!;

    // protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
    // => optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=webChatapp;Integrated Security=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Chatdata>(entity =>
        {
            entity.HasKey(e => e.ChatIdPk);

            entity.ToTable("chatdata");

            entity.HasIndex(e => e.ReceiverIdFk, "IX_chatdata_receiver_id_fk");

            entity.HasIndex(e => e.SenderIdFk, "IX_chatdata_sender_id_fk");

            entity.Property(e => e.ChatIdPk).HasColumnName("chat_id_pk");
            entity.Property(e => e.LastMessageTime)
                .HasColumnType("datetime")
                .HasColumnName("last_message_time");
            entity.Property(e => e.ReceiverIdFk).HasColumnName("receiver_id_fk");
            entity.Property(e => e.SenderIdFk).HasColumnName("sender_id_fk");

            entity.HasOne(d => d.ReceiverIdFkNavigation).WithMany(p => p.ChatdatumReceiverIdFkNavigations)
                .HasForeignKey(d => d.ReceiverIdFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_userdataUserId_chatdataReceiverId");

            entity.HasOne(d => d.SenderIdFkNavigation).WithMany(p => p.ChatdatumSenderIdFkNavigations)
                .HasForeignKey(d => d.SenderIdFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_userdataUserId_chatdataSenderId");
        });

        modelBuilder.Entity<Messagedata>(entity =>
        {
            entity.HasKey(e => e.MessageIdPk);

            entity.ToTable("messagedata");

            entity.HasIndex(e => e.ChatIdFk, "IX_messagedata_chat_id_fk");

            entity.HasIndex(e => e.SenderIdFk, "IX_messagedata_sender_id_fk");

            entity.Property(e => e.MessageIdPk).HasColumnName("message_id_pk");
            entity.Property(e => e.ChatIdFk).HasColumnName("chat_id_fk");
            entity.Property(e => e.Message)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("message");
            entity.Property(e => e.MessageSeen).HasColumnName("message_seen");
            entity.Property(e => e.MessageTime)
                .HasColumnType("datetime")
                .HasColumnName("message_time");
            entity.Property(e => e.ReceiverIdFk).HasColumnName("receiver_id_fk");
            entity.Property(e => e.SenderIdFk).HasColumnName("sender_id_fk");

            entity.HasOne(d => d.ChatIdFkNavigation).WithMany(p => p.Messagedata)
                .HasForeignKey(d => d.ChatIdFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_chatdataChatId_messagedataChatId");

            entity.HasOne(d => d.SenderIdFkNavigation).WithMany(p => p.Messagedata)
                .HasForeignKey(d => d.SenderIdFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_userdataUserId_messagedataSenderId");
        });

        modelBuilder.Entity<Userdata>(entity =>
        {
            entity.HasKey(e => e.UserIdPk);

            entity.ToTable("userdata");

            entity.HasIndex(e => e.LoginIdUk, "Unique_Login_id").IsUnique();

            entity.HasIndex(e => e.PhoneNoUk, "Unique_Phone_no").IsUnique();

            entity.Property(e => e.UserIdPk).HasColumnName("user_id_pk");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.LoginIdUk)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("login_id_uk");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("password");
            entity.Property(e => e.PhoneNoUk)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("phone_no_uk");
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("user_name");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}